@using GShock.BL
@using GShock.API.Data

@page "/gshockMain"
@inject IHandleState handleService

<h3>GshockMain</h3>

<button class="btn btn-primary" @onclick="(async () => { GShock(); })">Turn on</button>

@if (display.Type == "string")
{
<p> @display.Value</p>
}

<button class="btn btn-primary" @onclick="() => { ButtonClicked(new ButtonA(handleService)); }">A</button>
<button class="btn btn-primary" @onclick="() => { ButtonClicked(new ButtonB(handleService)); }">B</button>
<button class="btn btn-primary" @onclick="() => { ButtonClicked(new ButtonC(handleService)); }">C</button>
<button class="btn btn-primary" @onclick="() => { ButtonClicked(new ButtonS(handleService)); }">S</button>

@code {
    public bool isClicked = false;
    public Display display = new Display("string", "Turn on GShock");
    public int refreshTime = 1;


    private void ButtonClicked(IClickButton clickButton)
    {
        var response = clickButton.Execute();
        display.Value = response.Value;
        StateHasChanged();

    }

    async Task GShock()
    {
        while(true)
        {
            await Task.Delay(1000*refreshTime);
            var response = handleService.Refresh();
            display.Value = response.Value;

            StateHasChanged();
        }
    }
}
